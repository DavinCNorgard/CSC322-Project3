--
-- CSC 322 Project 3
--
-- Name: Davin Norgard
-- Vnum: V00929845
--
-- Name: Rastin Rashidi
-- Vnum: V00963407
--
-- Name: Jean-Medard Udeh (jd)
-- Vnum: V00940546
--
-- Name: Radu Lonescu 
-- Vnum: V00891249
--
--
MODULE main
  
VAR
  chopsticks : array 0..4 of {nobody,0,1,2,3,4}; -- who holds the chopstick.
  priority : {0,1,2,3,4}; -- global priority variable
  --
  -- Philosopher i has chopstick i on left and chopstick
  -- (i + 1) mod 5 on right
  --
  p0 : process philosopher(0,chopsticks[0],chopsticks[1], priority);
  p1 : process philosopher(1,chopsticks[1],chopsticks[2], priority);
  p2 : process philosopher(2,chopsticks[2],chopsticks[3], priority);
  p3 : process philosopher(3,chopsticks[3],chopsticks[4], priority);
  p4 : process philosopher(4,chopsticks[4],chopsticks[0], priority);
  
ASSIGN
  --
  -- Initially, all chopsticks are free
  --
  init(chopsticks[0]) := nobody;
  init(chopsticks[1]) := nobody;
  init(chopsticks[2]) := nobody;
  init(chopsticks[3]) := nobody;
  init(chopsticks[4]) := nobody;
  init(priority) := 0; -- initialize global priority
    
MODULE philosopher(i,left,right, turn)
  
VAR
  state : {thinking, hungry, eating, done};
  
DEFINE
  --
  -- These are just abbreviations, not state variables
  --
  gotleft := (left=i);
  gotright := (right=i);
  leftfree := (left=nobody);
  rightfree := (right=nobody);
  my_turn := (turn = i);

    
ASSIGN
  init(state) := thinking;

  next(left)  := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and left chopstick if free, take it
    --
    (state=hungry) & leftfree & my_turn: i;
    TRUE : left;
  esac;

  next(right) := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and have left chopstick and right is free, take it
    --
    (state=hungry) & gotleft & rightfree & my_turn: i; 
    TRUE : right;
  esac;

  next(state) := case
    (state=thinking) : {thinking, hungry};
    (state=hungry) & gotleft & gotright : eating;
    (state=hungry) : hungry; -- don't have chopsticks
    (state=eating) : {eating, done};
    (state=done) : thinking;
    TRUE : state;
  esac;

  next(turn) := case

      (state=thinking) & my_turn & (i=0): 1;
      (state=thinking) & my_turn & (i=1): 2;
      (state=thinking) & my_turn & (i=2): 3;
      (state=thinking) & my_turn & (i=3): 4;
      (state=thinking) & my_turn & (i=4): 0;

      (state=done) & my_turn & leftfree & rightfree & (i=0) : 1 ;
      (state=done) & my_turn & leftfree & rightfree & (i=1) : 2 ;
      (state=done) & my_turn & leftfree & rightfree & (i=2) : 3 ;
      (state=done) & my_turn & leftfree & rightfree & (i=3) : 4 ;
      (state=done) & my_turn & leftfree & rightfree & (i=4) : 0 ;
      TRUE : turn;
    esac;


-- add fairness constraints here
FAIRNESS !(state = eating) 
FAIRNESS running;
  -- philosophers should eat an equal number of times

-- add specifications here 

-- Safety:

CTLSPEC
  -- no deadlock, 
  -- if all states are hungry and they are all holding the left chopstick
  AG !((state = hungry) & gotleft & !gotright) -> AF ((state = hungry) & gotleft & !gotright)
  
CTLSPEC
  -- a philosopher must have both chopsticks to eat
  AG ((state = eating) -> (gotleft & gotright))

-- Liveness:

CTLSPEC
  -- If a philosopher wants to eat, he will eventually eat
  -- no starvation
  AG ((state = hungry) -> AF (state = eating));





